import 'package:flutter_app_template/src/core/network/ai_api/models/text_analysis_model.dart';
import 'package:flutter_app_template/src/core/network/ai_api/repos/ai_repo.dart';
import 'package:flutter_app_template/src/core/network/models/app_error.dart';
import 'package:flutter_app_template/src/features/detector/presentation/pages/detector_page.dart';
import 'package:fpdart/fpdart.dart';

class MockAiRepo implements AiRepo {
  @override
  Future<Either<AppError, TextAnalysisResult>> analyzeText({required String text, required DetectorModes mode}) async {
    // Simulate API delay
    await Future.delayed(const Duration(seconds: 2));

    // Mock AI detection logic - simple heuristic based on text patterns
    final aiPatterns = [
      'artificial intelligence',
      'machine learning',
      'neural network',
      'algorithm',
      'data processing',
      'predictive model',
      'automation',
      'generated by',
      'synthetic',
      'computational',
    ];

    final humanPatterns = [
      'I think',
      'I feel',
      'personally',
      'my experience',
      'I believe',
      'in my opinion',
      'from what I understand',
      'based on my knowledge',
    ];

    int aiScore = 0;
    int humanScore = 0;

    final lowerText = text.toLowerCase();

    for (final pattern in aiPatterns) {
      if (lowerText.contains(pattern)) {
        aiScore += 10;
      }
    }

    for (final pattern in humanPatterns) {
      if (lowerText.contains(pattern)) {
        humanScore += 15;
      }
    }

    // Add some randomness
    aiScore += (DateTime.now().millisecond % 30);
    humanScore += (DateTime.now().second % 25);

    final total = aiScore + humanScore;
    final aiProbability = total > 0 ? aiScore / total : 0.5;
    final humanProbability = 1.0 - aiProbability;

    TextSource source;
    if (aiProbability > 0.6) {
      source = TextSource.ai;
    } else if (humanProbability > 0.6) {
      source = TextSource.human;
    } else {
      source = TextSource.mixed;
    }

    final suggestions = <String>[];
    if (source == TextSource.ai) {
      suggestions.addAll([
        'Consider adding more personal experiences',
        'Use more conversational language',
        'Add emotional expressions',
        'Include personal opinions and beliefs',
      ]);
    } else if (source == TextSource.human) {
      suggestions.addAll([
        'Text appears human-like',
        'Good balance of personal and factual content',
        'Natural language flow detected',
      ]);
    }

    // Analyze sentences for detailed breakdown
    final sentences = text.split(RegExp(r'[.!?]+')).where((s) => s.trim().isNotEmpty).toList();
    final totalSentences = sentences.length;

    // Identify AI-generated sentences based on patterns
    final aiGeneratedSentences = <String>[];
    int aiSentenceCount = 0;

    for (final sentence in sentences) {
      final lowerSentence = sentence.toLowerCase();
      bool isAIGenerated = false;

      // Check for AI patterns in this sentence
      for (final pattern in aiPatterns) {
        if (lowerSentence.contains(pattern)) {
          isAIGenerated = true;
          break;
        }
      }

      // Check for overly formal or technical language
      if (lowerSentence.contains('implementation') ||
          lowerSentence.contains('methodology') ||
          lowerSentence.contains('optimization') ||
          lowerSentence.contains('utilize') ||
          lowerSentence.contains('therefore') ||
          lowerSentence.contains('moreover') ||
          lowerSentence.contains('this is a test') ||
          lowerSentence.contains('wrapped up sprint') ||
          lowerSentence.contains('qa team') ||
          lowerSentence.contains('test coverage') ||
          lowerSentence.contains('defects') ||
          lowerSentence.contains('patch cycle') ||
          lowerSentence.contains('analytics dashboard') ||
          lowerSentence.contains('api gateway') ||
          lowerSentence.contains('board meeting') ||
          lowerSentence.contains('reservation code')) {
        isAIGenerated = true;
      }

      // Special case for "THIS IS A TEST" - highlight it specifically
      if (lowerSentence.contains('this is a test')) {
        aiGeneratedSentences.add('THIS IS A TEST');
        aiSentenceCount++;
      }

      if (isAIGenerated) {
        aiGeneratedSentences.add(sentence.trim());
        aiSentenceCount++;
      }
    }

    return right(TextAnalysisResult(
      source: source,
      aiProbability: aiProbability,
      humanProbability: humanProbability,
      suggestions: suggestions,
      explanation: _getExplanation(source, aiProbability, humanProbability),
      totalSentences: totalSentences,
      aiGeneratedSentences: aiSentenceCount,
      highlightedSentences: aiGeneratedSentences,
    ));
  }

  @override
  Stream<Either<AppError, HumanizationResult>> humanizeText(String text,
      {double? humanLike, double? creativity}) async* {
    // Simulate streaming humanization
    await Future.delayed(const Duration(milliseconds: 500));

    const fullText = '''
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.

Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?

At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio.

Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.
''';

    // Split text into words
    final words = fullText.split(' ');
    String currentText = '';
    double currentHumanLike = 0.0;

    for (int i = 0; i < words.length; i++) {
      // Add current word to the text
      if (currentText.isNotEmpty) {
        currentText += ' ';
      }
      currentText += words[i];

      // Calculate progress-based human-like score
      currentHumanLike = 0.3 + (0.65 * (i / words.length));

      // Create changes list based on progress
      final changes = <String>[];
      if (i > words.length * 0.25) {
        changes.add('Generated human-like text');
      }
      if (i > words.length * 0.5) {
        changes.add('Applied natural language patterns');
      }
      if (i > words.length * 0.75) {
        changes.add('Enhanced readability');
      }

      // Yield current state
      yield right(HumanizationResult(
        originalText: text,
        humanizedText: currentText,
        humanLike: currentHumanLike,
        changes: changes,
        explanation: 'Text is being humanized word by word...',
      ));

      // Small delay between words to simulate streaming
      await Future.delayed(const Duration(milliseconds: 50));
    }

    // Final yield with complete text
    yield right(HumanizationResult(
      originalText: text,
      humanizedText: fullText,
      humanLike: 0.95,
      changes: [
        'Generated human-like text',
        'Applied natural language patterns',
        'Enhanced readability',
      ],
      explanation: 'Text has been humanized using natural language patterns and improved readability.',
    ));
  }

  @override
  Stream<Either<AppError, ContentGenerationResult>> generateContent({
    required String text,
    required String typeOfWriting,
    required String tone,
    required int wordCount,
    required String language,
  }) async* {
    // Simulate streaming content generation
    await Future.delayed(const Duration(milliseconds: 500));

    const fullContent = '''
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.

Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?

At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio.

Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.
''';

    // Split content into words
    final words = fullContent.split(' ');
    String currentContent = '';

    for (int i = 0; i < words.length; i++) {
      // Add current word to the content
      if (currentContent.isNotEmpty) {
        currentContent += ' ';
      }
      currentContent += words[i];

      // Create suggestions list based on progress
      final suggestions = <String>[];
      if (i > words.length * 0.25) {
        suggestions.add('Content generated successfully');
      }
      if (i > words.length * 0.5) {
        suggestions.add('Follows specified tone and style');
      }
      if (i > words.length * 0.75) {
        suggestions.add('Meets word count requirements');
      }

      // Yield current state
      yield right(ContentGenerationResult(
        originalText: text,
        generatedContent: currentContent,
        typeOfWriting: typeOfWriting,
        tone: tone,
        wordCount: wordCount,
        language: language,
        suggestions: suggestions,
        explanation: 'Content is being generated word by word...',
      ));

      // Small delay between words to simulate streaming
      await Future.delayed(const Duration(milliseconds: 50));
    }

    // Final yield with complete content
    yield right(ContentGenerationResult(
      originalText: text,
      generatedContent: fullContent,
      typeOfWriting: typeOfWriting,
      tone: tone,
      wordCount: wordCount,
      language: language,
      suggestions: [
        'Content generated successfully',
        'Follows specified tone and style',
        'Meets word count requirements',
        'Well-structured and engaging'
      ],
      explanation: 'Content has been generated based on your specifications with appropriate tone and style.',
    ));
  }

  @override
  Future<Either<AppError, String>> generateTitle(String prompt) async {
    // Simulate AI title generation delay
    await Future.delayed(const Duration(milliseconds: 300));

    // Extract content from prompt and generate a mock title
    if (prompt.contains('humanized')) {
      return right('Enhanced Human Text with Natural Language Patterns');
    } else if (prompt.contains('generated')) {
      return right('AI-Generated Content with Professional Writing Style');
    } else {
      return right('Smart AI Title for Content Management');
    }
  }

  String _getExplanation(TextSource source, double aiProb, double humanProb) {
    switch (source) {
      case TextSource.ai:
        return 'This text shows characteristics typical of AI-generated content, such as formal language patterns and technical terminology. AI probability: ${(aiProb * 100).toStringAsFixed(1)}%';
      case TextSource.human:
        return 'This text appears to be written by a human, with natural language patterns and personal elements. Human probability: ${(humanProb * 100).toStringAsFixed(1)}%';
      case TextSource.mixed:
        return 'This text shows mixed characteristics of both AI and human writing. Further analysis may be needed to determine the primary source.';
    }
  }
}
